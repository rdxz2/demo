- name: Make sure CDC directory exists
  ansible.builtin.file:
    path: "{{ home_dir_cdc }}"
    state: directory
    mode: "0700"

- name: Make sure CDC subdirectories exists
  ansible.builtin.file:
    path: "{{ home_dir_cdc }}/{{ item }}"
    state: directory
    mode: "0700"
  loop:
    - outputs
    - logs

- name: Copy env file for each databases
  ansible.builtin.template:
    src: .env.j2
    dest: "{{ home_dir_cdc }}/.env.{{ item.key }}"
    mode: "0600"
  loop: "{{ cdc_targets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  vars: # Used in template file
    streamer_db_host: "{{ item.value.streamer_db_host }}"
    streamer_db_port: "{{ item.value.streamer_db_port }}"
    streamer_db_user: "{{ item.value.streamer_db_user }}"
    streamer_db_pass: "{{ item.value.streamer_db_pass }}"
    streamer_db_name: "{{ item.value.streamer_db_name }}"
    streamer_publication_name: "{{ item.value.streamer_publication_name }}"
    streamer_replication_slot_name: "{{ item.value.streamer_replication_slot_name }}"

- name: Fetch service account file
  google.cloud.gcp_secret_manager:
    auth_kind: serviceaccount
    service_account_file: "{{ sa_gha_filename }}" # Hardcoded in GHA workflow file
    name: "{{ sa_cdc_key }}"
    project: "{{ gcp_project_id }}"
    version: latest
    state: present
  delegate_to: localhost # Run this on control node
  register: output_sa_cdc
  no_log: true

- name: Copy service account file
  ansible.builtin.copy:
    content: "{{ output_sa_cdc.payload.data | b64decode }}"
    dest: "{{ sa_cdc_filename }}"
    mode: "0400"
  no_log: true

- name: Pull streamer docker image
  community.docker.docker_image:
    name: "{{ docker_repository_host }}/{{ docker_repository_project_id }}/{{ docker_repository_name }}/cdc-streamer"
    tag: latest
    source: pull

- name: Pull uploader docker image
  community.docker.docker_image:
    name: "{{ docker_repository_host }}/{{ docker_repository_project_id }}/{{ docker_repository_name }}/cdc-uploader"
    tag: latest
    source: pull

- name: Run streamer docker container
  community.docker.docker_container:
    name: demo-cdc-streamer-{{ item }}
    image: "{{ docker_repository_host }}/{{ docker_repository_project_id }}/{{ docker_repository_name }}/cdc-streamer:latest"
    restart_policy: unless-stopped
    volumes:
      - "{{ home_dir_cdc }}/outputs:/app/outputs"
      - "{{ home_dir_cdc }}/logs:/app/logs"
      - "{{ sa_cdc_filename }}:/app/sa.json"
      - "{{ home_dir_cdc }}/.env.{{ item }}:/app/.env"
    state: started
    detach: true
    recreate: true
  loop: "{{ cdc_targets.keys() }}"

- name: Run uploader docker container
  community.docker.docker_container:
    name: demo-cdc-uploader-{{ item }}
    image: "{{ docker_repository_host }}/{{ docker_repository_project_id }}/{{ docker_repository_name }}/cdc-uploader:latest"
    restart_policy: unless-stopped
    volumes:
      - "{{ home_dir_cdc }}/outputs:/app/outputs"
      - "{{ home_dir_cdc }}/logs:/app/logs"
      - "{{ sa_cdc_filename }}:/app/sa.json"
      - "{{ home_dir_cdc }}/.env.{{ item }}:/app/.env"
    state: started
    detach: true
    recreate: true
  loop: "{{ cdc_targets.keys() }}"
